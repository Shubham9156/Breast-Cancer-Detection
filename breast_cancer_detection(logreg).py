# -*- coding: utf-8 -*-
"""Breast Caner Detection(LogReg).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LbQBktbpw14FolcAeT49tNsNo3_7M909

Breast Cancer Detection with Logistic Regression
"""

# Import libraries
import numpy as np
import sklearn.datasets

# Getting the dataset
breast_cancer = sklearn.datasets.load_breast_cancer()

print(breast_cancer)

x = breast_cancer.data
y = breast_cancer.target

print(x)
print(y)

print(x.shape,y.shape)

"""Import data to the Pandas DAta Frame"""

import pandas as pd

data = pd.DataFrame(breast_cancer.data, columns = breast_cancer.feature_names)

data['class'] = breast_cancer.target

data.head()

data.describe()

print(data['class'].value_counts())

print(breast_cancer.target_names)

data.groupby('class').mean()

"""0-Malignant
1-Benign
"""

from sklearn.model_selection import train_test_split

x_train, x_test,y_train, y_test = train_test_split(x, y)

print(y.shape, y_train.shape, y_test.shape)

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.1)
# test_size ---> to specify the percentage of test data needed

print(y.shape, y_train.shape, y_test.shape)

print(y.mean(), y_train.mean(),y_test.mean())

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.1,stratify=y)
# stratify ---> for correct distribution of data as of the original data

print(y.mean(), y_train.mean(),y_test.mean())

x_train,x_test,y_train,y_test = train_test_split(x, y, test_size = 0.1,stratify=y, random_state=1)
# random_state ---> specific split of data. each value of random_state the data differently

print(x_train.mean(),x_test.mean(),x.mean())

print(x_train)

"""**Logistic Regression**"""

# import logistic regression from sklearn
from sklearn.linear_model import LogisticRegression

classifier = LogisticRegression()    # loading the logistic regrssion model to the variable "classifier"

classifier.fit?

# training the model on training data
classifier.fit(x_train,y_train)

"""Evaluation of the model"""

# import accuracy_score
from sklearn.metrics import accuracy_score

prediction_on_training_data = classifier.predict(x_train)
accuracy_on_training_data = accuracy_score(y_train,prediction_on_training_data)

print('Accuracy on training data: ',accuracy_on_training_data)

# prediction on test_data
prediction_on_test_data = classifier.predict(x_test)
accuracy_on_test_data = accuracy_score(y_test, prediction_on_test_data)

print('Accuracy on test data: ',accuracy_on_test_data)

"""Detecting whether the Patient has breast cancer in benign or Malignant stage """

input_data = (17.99,10.38,122.8,1001,0.1184,0.2776,0.3001,0.1471,0.2419,0.07871,1.095,0.9053,8.589,153.4,0.006399,0.04904,0.05373,0.01587,0.03003,0.006193,25.38,17.33,184.6,2019,0.1622,0.6656,0.7119,0.2654,0.4601,0.1189)
# change the input_data to numpy array to make prediction
input_data_as_numpy_array = np.asarray(input_data)
print(input_data)

# reshape the array as we are predicting the output for one instance
inpu_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# prediction
prediction = classifier.predict(input_data_reshaped)
print(prediction)     # return a list with element [0] if Malignant; returtn a list with [1]  if benign

if(prediction[0] == 0):
  print('This breast Cnacer is Malignant')
else:
  print('The breast cancer is Benign')

input_data = (13.54,14.36,87.46,566.3,0.09779,0.08129,0.06664,0.04781,0.1885,0.05766,0.2699,0.7886,2.058,23.56,0.008462,0.0146,0.02387,0.01315,0.0198,0.0023,15.11,19.26,99.7,711.2,0.144,0.1773,0.239,0.1288,0.2977,0.07259)
# change the input_data to numpy array to make prediction
input_data_as_numpy_array = np.asarray(input_data)
print(input_data)

# reshape the array as we are predicting the output for one instance
inpu_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# prediction
prediction = classifier.predict(input_data_reshaped)
print(prediction)     # return a list with element [0] if Malignant; returtn a list with [1]  if benign

if(prediction[0] == 0):
  print('This breast Cnacer is Malignant')
else:
  print('The breast cancer is Benign')

